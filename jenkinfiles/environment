pipeline {
    agent any
    environment {
        USER_NAME = "vignesh"
        USER_ID = 23 // All the environment variable are casted to string
        TRIGGER_NEXT = true
    }
    stages {
        stage ("Listing all environment variables") {
            steps {
                sh "printenv | sort"
            }
        }
        stage ("Using environment variable") {
            environment {
                USER_PATH = "/home/vignesh"
                USER_NAME = "venkatesh"
            }
            steps {
                // ${env.BUILD_NUMBER} or ${BUILD_NUMBER} are same
                echo "BUILD_NUMBER = ${env.BUILD_NUMBER}"
                // If you are sh block you access variable directly like this $BUILD_NUMBER
                sh 'echo BUILD_NUMBER = $BUILD_NUMBER'

                echo "Current user NAME is ${env.USER_NAME}"
                echo "Current user ID is ${env.USER_ID} (type: ${env.USER_ID.class})"

                echo "USER_PATH = ${env.USER_PATH}"

                script {
                    env.USER_GROUP = "users"
                }
                echo "Current user group = ${env.USER_GROUP}"

                withEnv(["USER_PSD=secret", "USER_IS_ADMIN=false"]) {
                    echo "USER_PSD = ${USER_PSD}"
                    sh 'echo USER_ID_ADMIN = $USER_IS_ADMIN'
                }
            }         
        }
        stage ("Accessing environment variables") {
            steps {
                sh 'echo USER_NAME = $USER_NAME'
            }
        }
        stage ("Overriding in script block") {
            steps {
                script {
                    env.USER_NAME = "vijay"  // will not have any effect
                }
                echo "USER_NAME = ${env.USER_NAME}"
            }
        }
        stage ("Overriding with withEnv block") {
            steps {
                withEnv(["USER_NAME=Panda"]) {
                    echo "USER_NAME = ${env.USER_NAME}"
                }
                echo "USER_NAME = ${env.USER_NAME}" // will print value "vignesh" from pipeline environment block
            }
        }
        stage ("Using env vaibale as boolean (not working)") {
            when {
                expression {
                    // Here the env.TRIGGER_NEXT is actually "true" (string) so the condition is false
                    env.TRIGGER_NEXT == true
                }
            }
            steps {
                echo "OK"
            }
        }
        stage ("Using env vaibale as boolean (working) ") {
            when {
                expression {
                    // Here the env.TRIGGER_NEXT is actually "true" (string) so the condition is false
                    env.TRIGGER_NEXT == true
                }
            }
            steps {
                echo "OK"
            }
        }
        stage ("Converting string to boolean") {
            when {
                expression {
                    env.TRIGGER_NEXT.toBoolean() == true
                }
            }
            steps {
                echo "OK"
            }
        }
        stage ("Using environment as condition") {
            environment {
                TRIGGER_NEXT = "true" // true as string in double quotes
            }
            when {
                expression {
                    environment name: "TRIGGER_NEXT", value: "true"
                }
            }
            steps {
                echo "OK"
            }
        }
        stage ("Storing sh step output to environment variable") {
            environment {
                // sh step by default will not return any value
                FILES_COUNT = sh "ls -al /tmp | wc -l" 
            }
            steps {
                echo "The tmp folder has ${FILES_COUNT} files"
            }
        }
        stage ("Storing sh step with parameters output to environment variable") {
            environment {
                FILES_COUNT = sh (script: "ls -al /tmp | wc -l", returnStdout: true) 
            }
            steps {
                echo "The tmp folder has ${FILES_COUNT} files"
            }
        }
    }
}